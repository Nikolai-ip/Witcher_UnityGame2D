//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""c0b0f854-5871-4c53-bbc2-61b2210632f8"",
            ""actions"": [
                {
                    ""name"": ""LeftAttack"",
                    ""type"": ""Button"",
                    ""id"": ""0199b879-990b-4e3e-9834-732bbdf8a7cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""5d103603-c732-408c-b87e-f75d9c40369b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirouetteAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f083f0c4-cb0a-46f5-8790-e3594bce7077"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""a77336ed-c392-46cb-96c4-e73dd5f92550"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Iteract"",
                    ""type"": ""Button"",
                    ""id"": ""307fb09c-0318-4d48-b0ce-c9c728d70766"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CountreAttackUp"",
                    ""type"": ""Button"",
                    ""id"": ""bb1ad451-27aa-4f0a-9bbd-2e12c6c35bee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CountreAttackSide"",
                    ""type"": ""Button"",
                    ""id"": ""35e5f56d-71d5-40b9-bdc2-36027665f41f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0a4228f4-cb17-4784-80bb-462899a8f447"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3aee2bab-d8f3-431d-80bc-d85cae62540c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""LeftAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""958af88b-7bb7-496c-ad64-825790904a97"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f79aa4f5-c00a-4f29-a444-c549f54fc0eb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""RightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e40c6acc-e6f4-4066-b381-c5a52baef40b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""211efbe6-6f20-4721-930e-afb80ff237f5"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""PirouetteAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1035c2b9-7e75-42c3-a64d-451266662b64"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PirouetteAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd071211-253c-42b0-be45-2697f040130a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08b4f7d7-5398-42fa-9e23-79ba418e2ed5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9547a558-e32e-4fe7-aef1-d0aed381bcf1"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Iteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ad3f0c2-461b-4af2-9e2b-c2f3399ce29b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Iteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c1848c6-1731-4220-9a3c-0a2aa0ae9e9e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""CountreAttackUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1e0dfca-1dcc-4de3-bae8-07913d0048bb"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CountreAttackUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2901e5b2-fff4-4f22-8a47-734443647e68"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CountreAttackSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53331f06-a118-4452-9d97-f2f80644fd1a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""CountreAttackSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c09cea0-819c-43d0-847e-4f0b9910ef04"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""8f0b9fcb-5aeb-4d3c-b0d1-dd34d917d4cf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f38cf0db-100a-4fc6-93a2-3ea7e654baf2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""40d123bb-247b-4c30-b6c7-08d430ecf66d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5ebf6211-159c-4a9f-b8e6-6234bc4df5b2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b6ab974-39a3-409a-bfca-b381d5f784d2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShock4GamepadAndroid>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_LeftAttack = m_Main.FindAction("LeftAttack", throwIfNotFound: true);
        m_Main_RightAttack = m_Main.FindAction("RightAttack", throwIfNotFound: true);
        m_Main_PirouetteAttack = m_Main.FindAction("PirouetteAttack", throwIfNotFound: true);
        m_Main_Escape = m_Main.FindAction("Escape", throwIfNotFound: true);
        m_Main_Iteract = m_Main.FindAction("Iteract", throwIfNotFound: true);
        m_Main_CountreAttackUp = m_Main.FindAction("CountreAttackUp", throwIfNotFound: true);
        m_Main_CountreAttackSide = m_Main.FindAction("CountreAttackSide", throwIfNotFound: true);
        m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_LeftAttack;
    private readonly InputAction m_Main_RightAttack;
    private readonly InputAction m_Main_PirouetteAttack;
    private readonly InputAction m_Main_Escape;
    private readonly InputAction m_Main_Iteract;
    private readonly InputAction m_Main_CountreAttackUp;
    private readonly InputAction m_Main_CountreAttackSide;
    private readonly InputAction m_Main_Move;
    public struct MainActions
    {
        private @PlayerInput m_Wrapper;
        public MainActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftAttack => m_Wrapper.m_Main_LeftAttack;
        public InputAction @RightAttack => m_Wrapper.m_Main_RightAttack;
        public InputAction @PirouetteAttack => m_Wrapper.m_Main_PirouetteAttack;
        public InputAction @Escape => m_Wrapper.m_Main_Escape;
        public InputAction @Iteract => m_Wrapper.m_Main_Iteract;
        public InputAction @CountreAttackUp => m_Wrapper.m_Main_CountreAttackUp;
        public InputAction @CountreAttackSide => m_Wrapper.m_Main_CountreAttackSide;
        public InputAction @Move => m_Wrapper.m_Main_Move;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @LeftAttack.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLeftAttack;
                @LeftAttack.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLeftAttack;
                @LeftAttack.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLeftAttack;
                @RightAttack.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRightAttack;
                @RightAttack.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRightAttack;
                @RightAttack.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRightAttack;
                @PirouetteAttack.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPirouetteAttack;
                @PirouetteAttack.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPirouetteAttack;
                @PirouetteAttack.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPirouetteAttack;
                @Escape.started -= m_Wrapper.m_MainActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnEscape;
                @Iteract.started -= m_Wrapper.m_MainActionsCallbackInterface.OnIteract;
                @Iteract.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnIteract;
                @Iteract.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnIteract;
                @CountreAttackUp.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCountreAttackUp;
                @CountreAttackUp.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCountreAttackUp;
                @CountreAttackUp.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCountreAttackUp;
                @CountreAttackSide.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCountreAttackSide;
                @CountreAttackSide.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCountreAttackSide;
                @CountreAttackSide.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCountreAttackSide;
                @Move.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftAttack.started += instance.OnLeftAttack;
                @LeftAttack.performed += instance.OnLeftAttack;
                @LeftAttack.canceled += instance.OnLeftAttack;
                @RightAttack.started += instance.OnRightAttack;
                @RightAttack.performed += instance.OnRightAttack;
                @RightAttack.canceled += instance.OnRightAttack;
                @PirouetteAttack.started += instance.OnPirouetteAttack;
                @PirouetteAttack.performed += instance.OnPirouetteAttack;
                @PirouetteAttack.canceled += instance.OnPirouetteAttack;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Iteract.started += instance.OnIteract;
                @Iteract.performed += instance.OnIteract;
                @Iteract.canceled += instance.OnIteract;
                @CountreAttackUp.started += instance.OnCountreAttackUp;
                @CountreAttackUp.performed += instance.OnCountreAttackUp;
                @CountreAttackUp.canceled += instance.OnCountreAttackUp;
                @CountreAttackSide.started += instance.OnCountreAttackSide;
                @CountreAttackSide.performed += instance.OnCountreAttackSide;
                @CountreAttackSide.canceled += instance.OnCountreAttackSide;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnLeftAttack(InputAction.CallbackContext context);
        void OnRightAttack(InputAction.CallbackContext context);
        void OnPirouetteAttack(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnIteract(InputAction.CallbackContext context);
        void OnCountreAttackUp(InputAction.CallbackContext context);
        void OnCountreAttackSide(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
